# 这是无效的 请使用其他方法结合c与py文件
cmake_minimum_required(VERSION 3.10)

# 设置项目名称
project(ConvertPythonToCFrontend)

# 设置 C 编译器为 MinGW（如果未自动检测）
set(CMAKE_C_COMPILER "gcc")
set(CMAKE_CXX_COMPILER "g++")

# 设置 Python 的路径（确保找到 Python 解释器和开发工具）
find_package(Python3 REQUIRED COMPONENTS Interpreter Development)

# 设置源文件目录
set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

# 搜索目录下的所有 Python 文件
file(GLOB PYTHON_FILES
    "${SOURCE_DIR}/*.py"
)

# 输出目录
set(C_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/converted_c_files")
file(MAKE_DIRECTORY ${C_OUTPUT_DIR})

# 遍历 Python 文件并转换为 C
foreach(PY_FILE ${PYTHON_FILES})
    get_filename_component(PY_FILENAME_WE ${PY_FILE} NAME_WE) # 获取文件名（无扩展名）
    set(OUTPUT_C_FILE "${C_OUTPUT_DIR}/${PY_FILENAME_WE}.c")

    # 添加自定义命令调用 cpython 编译器
    add_custom_command(
        OUTPUT ${OUTPUT_C_FILE}
        COMMAND ${Python3_EXECUTABLE} -m py_compile ${PY_FILE} &&
                ${Python3_EXECUTABLE} -c "import py_compile, os; py_compile.compile('${PY_FILE}', cfile='${OUTPUT_C_FILE}')"
        DEPENDS ${PY_FILE}
        COMMENT "Converting ${PY_FILE} to ${OUTPUT_C_FILE}"
        VERBATIM
    )

    # 将生成的 C 文件添加到目标文件
    list(APPEND GENERATED_C_FILES ${OUTPUT_C_FILE})
endforeach()

# 添加生成目标
add_custom_target(ConvertAllPythonFiles ALL DEPENDS ${GENERATED_C_FILES})

# 打印 C 文件输出目录
message(STATUS "Converted C files will be saved in: ${C_OUTPUT_DIR}")
